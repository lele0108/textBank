{
  "name": "node-wit",
  "version": "2.0.0",
  "private": false,
  "homepage": "https://github.com/wit-ai/node-wit",
  "description": "Node module to request Wit.AI",
  "repository": {
    "type": "git",
    "url": "https://github.com/wit-ai/node-wit"
  },
  "bugs": {
    "url": "https://github.com/wit-ai/node-wit/issues"
  },
  "keywords": [
    "wit",
    "automation",
    "home",
    "siri",
    "wit.ai",
    "nlp",
    "speech",
    "intent",
    "jarvis"
  ],
  "author": {
    "name": "Olivier Vaussy",
    "email": "oliv@wit.ai"
  },
  "contributors": [
    {
      "name": "Anthony Kesich",
      "email": "anthony@wit.ai"
    },
    {
      "name": "irfaan",
      "email": "github@irfaan.com"
    }
  ],
  "scripts": {
    "test": "node_modules/mocha/bin/_mocha test/*_test.js --ignore-leaks -t 20000 --reporter spec"
  },
  "dependencies": {
    "request": "2.42.0",
    "underscore": "1.7.0"
  },
  "devDependencies": {
    "mocha": "1.21.4",
    "nock": "0.47.0",
    "chai": "1.9.1"
  },
  "main": "./index.js",
  "readme": "## Quick start\n\n1. You need to create an [Wit instance first](https://wit.ai/docs/console/quickstart).\n\n2. Install [Node.JS](http://nodejs.org/) on your computer.\n\n3. Setup your project \n\n    Create a new Node.JS app :\n    \n    ```bash\n    $ mkdir myapp\n    $ cd myapp\n    $ npm init\n    ...\n    ```\n    \n    Install and add node-wit as a dependencies in your package.json :\n    \n    ```bash\n    npm install --save node-wit\n    ```\n    \n    Execute `npm install` in your current folder to fetch the dependencies\n    \n    We will send an audio file to Wit.AI\n    \n    You can use [SoX](http://sox.sourceforge.net) to record WAV files from the command line.\n    `brew install sox` on OSX and `apt-get install sox` on ubuntu.\n    The following options will create a Wit-ready WAV file (press Ctrl+C to stop recording):\n    \n    ```bash\n    sox -d -b 16 -c 1 -r 16k sample.wav\n    ```\n    \n    Create a `index.js` file in myapp directory containing:\n    \n    ```javascript\n    var wit = require('node-wit');\n    var fs = require('fs');\n    var ACCESS_TOKEN = \"IQ77NWUPUMNBYEUEKRTWU3VDR5YSLHTA\";\n    \n    console.log(\"Sending text & audio to Wit.AI\");\n    \n    wit.captureTextIntent(ACCESS_TOKEN, \"Hello world\", function (err, res) {\n        console.log(\"Response from Wit for text input: \");\n        if (err) console.log(\"Error: \", err);\n        console.log(JSON.stringify(res, null, \" \"));\n    });\n    \n    var stream = fs.createReadStream('sample.wav');\n    wit.captureSpeechIntent(ACCESS_TOKEN, stream, \"audio/wav\", function (err, res) {\n        console.log(\"Response from Wit for audio stream: \");\n        if (err) console.log(\"Error: \", err);\n        console.log(JSON.stringify(res, null, \" \"));\n    });\n    ```\n\n4. Start your app\n\n```bash\n$ node index.js\nSending text & audio to Wit.AI\nResponse from Wit for text input:\n{\n \"msg_id\": \"b46d4a08-1e2e-43f4-b30a-aaa7bccb88e3\",\n \"_text\": \"Hello world\",\n \"outcomes\": [\n  {\n   \"_text\": \"Hello world\",\n   \"intent\": \"greetings_hi\",\n   \"entities\": {},\n   \"confidence\": 0.929\n  }\n ]\n}\nResponse from Wit for audio stream:\n{\n \"msg_id\": \"83c14e47-13cb-4ad4-9f5e-723cd47016be\",\n \"_text\": \"what's the weather in New York\",\n \"outcomes\": [\n  {\n   \"_text\": \"what's the weather in New York\",\n   \"intent\": \"weather\",\n   \"entities\": {\n    \"location\": [\n     {\n      \"suggested\": true,\n      \"value\": \"New York\"\n     }\n    ]\n   },\n   \"confidence\": 1\n  }\n ]\n}\n```\n\n## Examples\n\n\n## API\n\n### captureTextIntent\n\nThe `captureTextIntent` function returns the meaning extracted from the text\ninput. The function takes 4 parameters:\n- `access_token`: Your access token for your instance\n- `text`: The text input you want to extract the meaning of\n- `options`: [optional] A json object containing any call options such as `verbose` or `context`\n- `callback(error, response)`: A callback function get 2 arguments:\n    1. An `error` when applicable\n    2. A JSON object containing the Wit.AI response\n    \n```javascript\nvar wit = require('node-wit');\nwit.captureTextIntent(ACCESS_TOKEN, \"Hello world\", function (err, res) {\n    console.log(\"Response from Wit for text input: \");\n    if (err) console.log(\"Error: \", err);\n    console.log(JSON.stringify(res, null, \" \"));\n});\n```\n\n### captureSpeechIntent\n\nThe `captureSpeechIntent` function returns the meaning extracted from the audio\ninput. The function takes 5 arguments:\n- `access_token`: Your access token for your instance\n- `stream`: The audio stream you want to extract the meaning of\n- `content-type`: The content-type of your audio stream (`audio/wav`, `audio/mpeg3`, \n`audio/raw;encoding=unsigned-integer;bits=16;rate=8000;endian=big`, ...)\n- `options`: [optional] A json object containing any call options such as `verbose` or `context`\n- `callback(error, response)`: A callback function get 2 arguments:\n    1. An `error` when applicable\n    2. A JSON object containing the Wit.AI response\n    \n```javascript\nvar wit = require('node-wit');\nvar fs = require('fs');\nvar stream = fs.createReadStream('sample.wav');\nwit.captureSpeechIntent(ACCESS_TOKEN, stream, \"audio/wav\", function (err, res) {\n    console.log(\"Response from Wit for audio stream: \");\n    if (err) console.log(\"Error: \", err);\n    console.log(JSON.stringify(res, null, \" \"));\n});\n```\n",
  "readmeFilename": "README.md",
  "_id": "node-wit@2.0.0",
  "_shasum": "c4bb1c71dcefda509f457320be8d4d40879bca60",
  "_from": "node-wit@",
  "_resolved": "https://registry.npmjs.org/node-wit/-/node-wit-2.0.0.tgz"
}
